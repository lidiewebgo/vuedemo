{"remainingRequest":"/Users/isaac-chip/Desktop/vue-admin-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/isaac-chip/Desktop/vue-admin-template/src/components/Tags/index.vue?vue&type=style&index=0&id=11dff78c&lang=scss&scoped=true&","dependencies":[{"path":"/Users/isaac-chip/Desktop/vue-admin-template/src/components/Tags/index.vue","mtime":1598882164928},{"path":"/Users/isaac-chip/Desktop/vue-admin-template/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/isaac-chip/Desktop/vue-admin-template/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/isaac-chip/Desktop/vue-admin-template/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/isaac-chip/Desktop/vue-admin-template/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/isaac-chip/Desktop/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/isaac-chip/Desktop/vue-admin-template/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLy8gdGFn57uE5Lu25qC35byPCi50YWdzIHsKICB3aWR0aDogMTAwJTsKICB3aGl0ZS1zcGFjZTogbm93cmFwOwogIGJhY2tncm91bmQtY29sb3I6IGJsdWU7CiAgcGFkZGluZzogMTJweCAxMHB4OwogICYtb3V0LWJveCB7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgfQogICYtYm94IHsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHRyYW5zaXRpb246IDAuM3M7CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/Tags","sourcesContent":["<template>\n  <div\n    class=\"tags\"\n    @contextmenu.prevent\n    ref=\"tags\"\n    :style=\"{'padding': arrowVisible ? '12px 0' : '12px 10px'}\"\n  >\n    <div class=\"tags-out-box\" ref=\"outBox\">\n      <div class=\"svg arrow\" v-if=\"arrowVisible\" @click=\"handleClickToLeft\">\n        <svg-icon icon-class=\"arrow-left\" />\n      </div>\n      <div\n        class=\"tags-box\"\n        ref=\"box\"\n        :style=\"{'padding-left': arrowVisible ? '30px' : '0', left: `${left}px`}\"\n      >\n        <el-tag\n          ref=\"tag\"\n          size=\"small\"\n          v-for=\"(tag, i) in tags\"\n          :data-index=\"i\"\n          :data-id=\"tag.menuId\"\n          :key=\"tag.name\"\n          :closable=\"tag.name !== 'home'\"\n          :effect=\"$route.name === tag.name ? 'dark' : 'plain'\"\n          @contextmenu.native.prevent=\"handleClickContextMenu($event)\"\n          @click=\"handleTagClick($event, tag)\"\n          @close=\"handleTagClose(tag, i)\"\n        >{{tag.label}}</el-tag>\n      </div>\n      <div class=\"svg arrow arrow-right\" v-if=\"arrowVisible\" @click=\"handleClickToRight\">\n        <svg-icon icon-class=\"arrow-right\" />\n      </div>\n    </div>\n\n    <ul class=\"right-menu\" :style=\"{left: menuLeft, top: menuTop}\" v-show=\"contextMenuVisible\">\n      <a href=\"javascript:;\" @click=\"refresh\">刷新</a>\n      <a href=\"javascript:;\" @click=\"closeTag\" v-if=\"tagIndex !== 0\">关闭</a>\n      <a href=\"javascript:;\" @click=\"closeOtherTag\" v-if=\"tagIndex !== 0\">关闭其它</a>\n      <a href=\"javascript:;\" @click=\"closeAllTag\">关闭所有</a>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nexport default {\n  data() {\n    return {\n      contextMenuVisible: false, // 是否显示菜单\n      menuLeft: \"\", // 右键菜单距离浏览器左边的距离\n      menuTop: \"\", // 右键菜单距离浏览器上边的距离\n      tagIndex: 0, // 当前点击的tag的索引\n      tag: {}, // 当前右键点击的tag对象\n      arrowVisible: false, // 是否显示箭头\n      tagsBoxWidth: 0, // ref 为 outBox 的长度\n      tagsWidth: 0, // ref 为 tags 的长度\n      left: 0, // ref 为 box 节点相对于左边的距离，用于箭头点击\n    };\n  },\n  mounted() {\n    window.addEventListener(\"click\", (e) => {\n      const target = e.target;\n      if (target.nodeName !== \"SPAN\") {\n        // 只要点击的不是el-tag就可以关闭，因为el-tag是用span标签实现的\n        this.contextMenuVisible = false;\n      }\n    });\n  },\n  computed: {\n    ...mapState({\n      tags: (state) => state.tags.tagList,\n    }),\n  },\n\n  methods: {\n    handleClickContextMenu(event) {\n      const e = event || window.event;\n      const target = e.target;\n      this.menuLeft = e.layerX + 20 + \"px\"; // 菜单出现的位置距离左侧的距离\n      this.menuTop = e.layerY + 20 + \"px\"; // 菜单出现的位置距离顶部的距离\n      this.tagIndex = Number(target.getAttribute(\"data-index\")); // 获取当前右击菜单的索引。从0开始\n      this.contextMenuVisible = true; // 显示菜单\n\n      this.tag = this.tags[this.tagIndex]; // 当前右击的菜单信息\n    },\n    \n  },\n  \n};\n</script>\n\n<style lang=\"scss\" scoped>\n// tag组件样式\n.tags {\n  width: 100%;\n  white-space: nowrap;\n  background-color: blue;\n  padding: 12px 10px;\n  &-out-box {\n    display: inline-block;\n    position: relative;\n  }\n  &-box {\n    position: relative;\n    transition: 0.3s;\n  }\n}\n</style>"]}]}